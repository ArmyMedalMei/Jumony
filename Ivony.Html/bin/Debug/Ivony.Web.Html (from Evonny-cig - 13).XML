<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ivony.Web.Html</name>
    </assembly>
    <members>
        <member name="M:Ivony.Web.Html.IHtmlNode.Remove">
            <summary>
            移除节点
            </summary>
        </member>
        <member name="M:Ivony.Web.Html.HtmlBindingSheet.Load(System.String)">
            <summary>
            加载样式表
            </summary>
            <param name="filepath">样式表文件路径</param>
            <returns>加载完毕的样式表文档</returns>
        </member>
        <member name="M:Ivony.Web.Html.HtmlBindingSheet.Load(System.IO.Stream)">
            <summary>
            加载样式表
            </summary>
            <param name="stream">要从中加载样式表的流</param>
            <returns>加载的样式表</returns>
        </member>
        <member name="M:Ivony.Web.Html.HtmlBindingSheet.Load(System.IO.TextReader)">
            <summary>
            加载样式表
            </summary>
            <param name="reader">要从中加载样式表的文本读取器</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Web.Html.HtmlCssSelector.#ctor(System.String)">
            <summary>
            创建一个CSS选择器实例
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Ivony.Web.Html.HtmlCssSelector.Search(Ivony.Web.Html.IHtmlContainer,System.Boolean)">
            <summary>
            在指定容器子代元素和指定范畴下搜索满足选择器的所有元素
            </summary>
            <param name="container">容器，其所有子代元素被列入搜索范围</param>
            <param name="asScope">指定选择器在计算父元素时，是否不超出指定容器的范畴</param>
            <remarks>
            选择器的工作原理是从最里层的元素选择器开始搜索，逐步验证其父元素是否满足父选择器的规则。如果asScope参数为true，则选择器在验证父元素时，将不超出container的。考虑下面的文档结构：
            <![CDATA[
            <html>
              <body>
                <ul id="outer">
                  <li id="item">
                    <ul "inner">
                      <li>123</li>
                      <li>456</li>
                    </ul>
                    <ol>
                      <li>abc</li>
                    </ol>
                  </li>
                </ul>
              </body>
            </html>
            ]]>
            当使用选择器"#item ul li"来选择元素时，我们将得到正确的结果，即123和456两个节点。
            但如果我们将#item元素当作上下文且asScope参数为false来选择"ul li"元素时，可能会不能得到预期的结果，会发现abc元素也被选择了。这是因为选择器在查找父级元素限定时，会查找到id为outter的ul元素。为了解决此问题，请将asScope参数设置为true。
            </remarks>
            <returns>搜索到的所有元素</returns>
        </member>
        <member name="T:Ivony.Web.Html.AttributeExtensions">
            <summary>
            提供协助操作Attribute的扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Web.Html.AttributeExtensions.Attribute(Ivony.Web.Html.IHtmlElement,System.String)">
            <summary>
            获取指定名称的属性对象
            </summary>
            <param name="element">元素</param>
            <param name="name">属性名</param>
            <returns>属性对象，如果没找到，则返回null</returns>
        </member>
        <member name="M:Ivony.Web.Html.AttributeExtensions.Attribute(Ivony.Web.Html.IHtmlElement,System.String,System.Boolean)">
            <summary>
            获取指定名称的属性对象
            </summary>
            <param name="element">元素</param>
            <param name="name">属性名</param>
            <param name="create">指示如果没有找到，是否创建属性对象</param>
            <returns>属性对象</returns>
        </member>
        <member name="M:Ivony.Web.Html.AttributeExtensions.Attribute(System.Collections.Generic.IEnumerable{Ivony.Web.Html.IHtmlElement},System.String)">
            <summary>
            获取指定名称的所有属性对象
            </summary>
            <param name="elements">要获取属性的元素列表</param>
            <param name="name">属性名</param>
            <returns>存在的属性对象列表</returns>
        </member>
        <member name="M:Ivony.Web.Html.AttributeExtensions.Value(Ivony.Web.Html.IHtmlAttribute,System.String)">
            <summary>
            设置属性值
            </summary>
            <param name="attribute">属性对象</param>
            <param name="value">要设置的属性值</param>
            <returns>被设置的属性对象</returns>
        </member>
        <member name="M:Ivony.Web.Html.AttributeExtensions.Replace(Ivony.Web.Html.IHtmlAttribute,System.String,System.String)">
            <summary>
            设置属性值
            </summary>
            <param name="attribute">属性对象</param>
            <param name="oldValue">要被替换的字符串</param>
            <param name="newValue">用于替换的字符串</param>
            <returns>被设置的属性对象</returns>
        </member>
        <member name="M:Ivony.Web.Html.AttributeExtensions.Replace(Ivony.Web.Html.IHtmlAttribute,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            设置属性值
            </summary>
            <param name="attribute">属性对象</param>
            <param name="pattern">用于在属性值中查找匹配字符串的正则表达式对象</param>
            <param name="replacement">替换字符串</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Web.Html.AttributeExtensions.Replace(Ivony.Web.Html.IHtmlAttribute,System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            设置属性值
            </summary>
            <param name="attribute">属性对象</param>
            <param name="pattern">用于在属性值中查找匹配字符串的正则表达式对象</param>
            <param name="evaluator">用于每一步替换的计算函数</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Web.Html.AttributeExtensions.Replace(Ivony.Web.Html.IHtmlAttribute,System.String,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            设置属性值
            </summary>
            <param name="attribute">属性对象</param>
            <param name="pattern">用于在属性值中查找匹配字符串的正则表达式</param>
            <param name="evaluator">用于每一步替换的计算函数</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Web.Html.AttributeExtensions.Replace(Ivony.Web.Html.IHtmlAttribute,System.Func{System.String,System.String})">
            <summary>
            设置属性值
            </summary>
            <param name="attribute">属性对象</param>
            <param name="evaluator">用于替换属性值的计算函数</param>
            <returns></returns>
        </member>
        <member name="P:Ivony.Web.Html.IHtmlDocument.DocumentDeclaration">
            <summary>
            获取文档的声明信息，可以是xml声明，也可以是DTD。如果不被支持，则返回null。
            </summary>
        </member>
        <member name="T:Ivony.Web.Html.BindingExtensions">
            <summary>
            提供协助数据绑定的扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Web.Html.BindingExtensions.Bind(Ivony.Web.Html.IHtmlElement,System.String,System.Object)">
            <summary>
            绑定数据到指定位置
            </summary>
            <param name="element">要绑定数据的元素</param>
            <param name="path">绑定路径</param>
            <param name="value">绑定值</param>
            <returns>被绑定的元素</returns>
        </member>
        <member name="M:Ivony.Web.Html.BindingExtensions.Bind(Ivony.Web.Html.IHtmlElement,System.String,System.Object,System.String)">
            <summary>
            绑定数据到指定位置
            </summary>
            <param name="element">要绑定数据的元素</param>
            <param name="path">绑定路径</param>
            <param name="value">绑定值</param>
            <param name="format">用于绑定值的格式化字符串</param>
            <returns>被绑定的元素</returns>
        </member>
        <member name="M:Ivony.Web.Html.BindingExtensions.Bind(Ivony.Web.Html.IHtmlElement,System.String,System.Object,Ivony.Web.Html.BindingNullBehavior)">
            <summary>
            绑定数据到指定位置
            </summary>
            <param name="element">要绑定数据的元素</param>
            <param name="path">绑定路径</param>
            <param name="value">绑定值</param>
            <param name="nullBehavior">定义当绑定值为空的行为</param>
            <returns>被绑定的元素</returns>
        </member>
        <member name="M:Ivony.Web.Html.BindingExtensions.Bind(Ivony.Web.Html.IHtmlElement,System.String,System.Object,System.String,Ivony.Web.Html.BindingNullBehavior)">
            <summary>
            绑定数据到指定位置
            </summary>
            <param name="element">要绑定数据的元素</param>
            <param name="path">绑定路径</param>
            <param name="value">绑定值</param>
            <param name="format">用于绑定值的格式化字符串</param>
            <param name="nullBehavior">定义当绑定值为空的行为</param>
            <returns>被绑定的元素</returns>
        </member>
        <member name="M:Ivony.Web.Html.BindingExtensions.Bind(Ivony.Web.Html.IHtmlElement,Ivony.Web.Html.HtmlBindingContext,System.String,System.Object,System.String,Ivony.Web.Html.BindingNullBehavior)">
            <summary>
            绑定数据到指定位置
            </summary>
            <param name="element">要绑定数据的元素</param>
            <param name="context">要绑定到的绑定上下文</param>
            <param name="path">绑定路径</param>
            <param name="value">绑定值</param>
            <param name="format">用于绑定值的格式化字符串</param>
            <param name="nullBehavior">定义当绑定值为空的行为</param>
            <returns>被绑定的元素</returns>
        </member>
        <member name="M:Ivony.Web.Html.BindingExtensions.DataFrom``1(System.Collections.Generic.IEnumerable{Ivony.Web.Html.IHtmlElement},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            从数据源绑定数据列表到每一个元素的 DataContext
            </summary>
            <typeparam name="T">数据项类型</typeparam>
            <param name="elements">需要绑定数据的元素列表</param>
            <param name="dataSource">数据源</param>
            <returns>绑定后的元素列表</returns>
        </member>
        <member name="M:Ivony.Web.Html.BindingExtensions.DataFrom``1(System.Collections.Generic.IEnumerable{Ivony.Web.Html.IHtmlElement},System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            从数据源绑定数据列表到每一个元素的 DataContext
            </summary>
            <typeparam name="T">数据项类型</typeparam>
            <param name="elements">需要绑定数据的元素列表</param>
            <param name="dataSource">数据源</param>
            <param name="defaultValue">当数据源中的数据不足时，应采用的默认值</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Web.Html.BindingExtensions.DataBind(Ivony.Web.Html.IHtmlElement,System.String,System.String)">
            <summary>
            从 DataContext 绑定数据
            </summary>
            <param name="element">绑定数据的对象</param>
            <param name="bindPath">绑定路径</param>
            <param name="sourcePath">数据源路径</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Web.Html.BindingExtensions.DataBind(Ivony.Web.Html.IHtmlElement,System.String,System.String,System.String)">
            <summary>
            从 DataContext 绑定数据
            </summary>
            <param name="element">绑定数据的对象</param>
            <param name="bindPath">绑定路径</param>
            <param name="sourcePath">数据源路径</param>
            <param name="format">格式化字符串</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Web.Html.BindingExtensions.DataBind(Ivony.Web.Html.IHtmlElement,System.String,System.String,System.String,System.Object)">
            <summary>
            从 DataContext 绑定数据
            </summary>
            <param name="element">绑定数据的对象</param>
            <param name="bindPath">绑定路径</param>
            <param name="sourcePath">数据源路径</param>
            <param name="format">格式化字符串</param>
            <param name="defaultValue">如果找不到数据，所要使用的默认值</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Web.Html.BindingExtensions.Data(Ivony.Web.Html.IHtmlContainer)">
            <summary>
            获取 DataContext
            </summary>
            <param name="container">要获取 DataContext 的节点</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Web.Html.BindingExtensions.Data(Ivony.Web.Html.IHtmlContainer,System.Object)">
            <summary>
            设置 DataContext
            </summary>
            <param name="container">要设置 DataContext 的节点</param>
            <param name="dataContext">要设置的数据</param>
            <returns></returns>
        </member>
        <member name="T:Ivony.Web.Html.HtmlBindingContext">
            <summary>
            保存数据绑定操作的上下文
            </summary>
        </member>
        <member name="M:Ivony.Web.Html.HtmlBindingContext.Action``1(``0,System.Action{``0})">
            <summary>
            添加一个绑定操作
            </summary>
            <typeparam name="T">绑定对象类型</typeparam>
            <param name="target">绑定对象</param>
            <param name="action">绑定操作方法</param>
        </member>
        <member name="M:Ivony.Web.Html.HtmlBindingContext.Action``1(Ivony.Web.Html.HtmlBindingAction{``0})">
            <summary>
            添加一个绑定操作
            </summary>
            <typeparam name="T">绑定对象类型</typeparam>
            <param name="action">一个 BindAction 类型的对象，他保存了执行绑定操作所需的数据</param>
        </member>
        <member name="M:Ivony.Web.Html.HtmlBindingContext.SetDataContext(Ivony.Web.Html.IHtmlContainer,System.Object)">
            <summary>
            为一个容器对象设置数据上下文
            </summary>
            <param name="container">要设置数据上下文的容器对象</param>
            <param name="dataContext">数据上下文</param>
        </member>
        <member name="M:Ivony.Web.Html.HtmlBindingContext.GetDataContext(Ivony.Web.Html.IHtmlNode)">
            <summary>
            获取指定节点或元素最近的数据上下文
            </summary>
            <returns>最近的数据上下文，将递归查找父级和父级上下文，如果都没找到则返回null</returns>
        </member>
        <member name="M:Ivony.Web.Html.HtmlBindingContext.GetDataContextCore(Ivony.Web.Html.IHtmlNode)">
            <summary>
            查找指定节点的数据上下文，将递归向父级BindingContext查询
            </summary>
            <param name="node">指定节点</param>
            <returns>查找到的数据上下文，如果没有找到则返回null</returns>
        </member>
        <member name="M:Ivony.Web.Html.HtmlBindingContext.Commit">
            <summary>
            执行数据绑定操作，此操作将导致递归提交
            </summary>
        </member>
        <member name="M:Ivony.Web.Html.HtmlBindingContext.PostOrderTraverse(Ivony.Web.Html.IHtmlContainer)">
            <summary>
            后序遍历所有元素用于绑定
            </summary>
            <param name="container">根元素</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Web.Html.HtmlBindingContext.PostOrderTraverse(Ivony.Web.Html.IHtmlContainer,System.Collections.Generic.IList{Ivony.Web.Html.IHtmlElement})">
            <summary>
            后序遍历所有元素，并将找到的元素放入集合中
            </summary>
            <param name="container">根元素</param>
            <param name="elementList">存放元素的集合</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Web.Html.HtmlBindingContext.EnterContext(Ivony.Web.Html.IHtmlContainer,System.String)">
            <summary>
            创建并进入一个绑定上下文
            </summary>
            <param name="scope">绑定范围，超出此范围的绑定都不会被提交</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Web.Html.HtmlBindingContext.Discard">
            <summary>
            放弃所有的绑定
            </summary>
        </member>
        <member name="M:Ivony.Web.Html.HtmlBindingContext.Exit">
            <summary>
            退出绑定上下文，同时也会递归退出其上所有没有退出的绑定上下文
            </summary>
        </member>
        <member name="M:Ivony.Web.Html.HtmlBindingContext.Exit(System.Boolean)">
            <summary>
            退出上下文
            </summary>
            <param name="discard">是否放弃上下文中存在的绑定操作</param>
        </member>
        <member name="M:Ivony.Web.Html.HtmlBindingContext.Exit(System.Boolean,Ivony.Web.Html.HtmlBindingContext)">
            <summary>
            退出上下文
            </summary>
            <param name="discard">是否放弃上下文中存在的绑定操作</param>
            <param name="target">递归退出的目标</param>
        </member>
        <member name="M:Ivony.Web.Html.HtmlBindingContext.ExitContext">
            <summary>
            退出当前上下文
            </summary>
        </member>
        <member name="P:Ivony.Web.Html.HtmlBindingContext.Actions">
            <summary>
            保存的所有绑定操作
            </summary>
        </member>
        <member name="P:Ivony.Web.Html.HtmlBindingContext.Scope">
            <summary>
            绑定的范围
            </summary>
        </member>
        <member name="P:Ivony.Web.Html.HtmlBindingContext.Name">
            <summary>
            绑定上下文的友好名称
            </summary>
        </member>
        <member name="P:Ivony.Web.Html.HtmlBindingContext.Current">
            <summary>
            获取当前的绑定上下文
            </summary>
        </member>
        <member name="P:Ivony.Web.Html.HtmlBindingContext.ParentContext">
            <summary>
            父级绑定上下文
            </summary>
        </member>
        <member name="M:Ivony.Web.Html.IHtmlElement.BindCore(Ivony.Web.Html.HtmlBindingContext,System.String,System.String,Ivony.Web.Html.BindingNullBehavior)">
            <summary>
            提供数据绑定的核心方法。不应从代码中直接调用，而应该使用Bind扩展方法。
            </summary>
            <param name="context">绑定上下文</param>
            <param name="path">绑定路径</param>
            <param name="value">绑定值</param>
            <param name="nullMode">为空时执行的操作</param>
        </member>
        <member name="M:Ivony.Web.Html.IHtmlElement.AddAttribute(System.String)">
            <summary>
            添加一个属性
            </summary>
            <param name="attributeName">属性名</param>
            <returns>添加的属性</returns>
        </member>
    </members>
</doc>
