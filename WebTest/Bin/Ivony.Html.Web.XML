<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ivony.Html.Web</name>
    </assembly>
    <members>
        <member name="T:Ivony.Html.Web.AttributeExpression">
            <summary>
            属性表达式
            </summary>
        </member>
        <member name="F:Ivony.Html.Web.AttributeExpression.ExpressionArgumentPattern">
            <summary>
            用于解析属性表达式参数的正则表达式
            </summary>
        </member>
        <member name="F:Ivony.Html.Web.AttributeExpression.AttributeExpressionPattern">
            <summary>
            用于解析属性表达式的正则表达式
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.AttributeExpression.#ctor(Ivony.Html.IHtmlElement)">
            <summary>
            从元素创建属性表达式
            </summary>
            <param name="element">要创建属性表达式的元素</param>
        </member>
        <member name="M:Ivony.Html.Web.AttributeExpression.ParseExpression(Ivony.Html.IHtmlAttribute)">
            <summary>
            解析属性为绑定表达式
            </summary>
            <param name="attribute">要解析的属性</param>
            <returns>绑定表达式</returns>
        </member>
        <member name="P:Ivony.Html.Web.AttributeExpression.Name">
            <summary>
            表达式名称
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.AttributeExpression.Arguments">
            <summary>
            参数值
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.IHtmlListBinder">
            <summary>
            代表一个列表数据绑定器
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.IHtmlElementBinder">
            <summary>
            定义 HTML 元素绑定器
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.IHtmlElementBinder.BindAttribute(Ivony.Html.Web.HtmlBindingContext,Ivony.Html.IHtmlAttribute)">
            <summary>
            绑定元素属性，将在绑定元素之前被调用
            </summary>
            <param name="context">数据绑定上下文</param>
            <param name="attribute">要绑定的属性</param>
            <returns>是否执行了绑定，若执行了绑定，则对于这个属性其他绑定器不再运行</returns>
        </member>
        <member name="M:Ivony.Html.Web.IHtmlElementBinder.BindElement(Ivony.Html.Web.HtmlBindingContext,Ivony.Html.IHtmlElement)">
            <summary>
            绑定元素
            </summary>
            <param name="context">数据绑定上下文</param>
            <param name="element">要绑定的元素</param>
            <returns>是否执行了绑定，若执行了绑定，则对于这个元素其他绑定器不再运行</returns>
        </member>
        <member name="M:Ivony.Html.Web.IHtmlListBinder.BindList(Ivony.Html.Web.HtmlListBindingContext,Ivony.Html.IHtmlElement)">
            <summary>
            绑定元素
            </summary>
            <param name="bindingContext">数据绑定上下文</param>
            <param name="element">要绑定的元素</param>
            <returns>是否执行了绑定，若执行了绑定，则对于这个元素其他绑定器不再运行</returns>
        </member>
        <member name="T:Ivony.Html.Web.DefaultRequestMapper">
            <summary>
            默认的请求映射器
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.IRequestMapper">
            <summary>
            定义请求映射器，Jumony请求映射器为请求获取 HTML 模板和对应的处理程序
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.IRequestMapper.MapRequest(System.Web.HttpRequestBase)">
            <summary>
            映射当前请求
            </summary>
            <param name="request">当前 HTTP 请求</param>
            <returns>映射结果</returns>
        </member>
        <member name="M:Ivony.Html.Web.DefaultRequestMapper.MapRequest(System.Web.HttpRequestBase)">
            <summary>
            映射当前请求
            </summary>
            <param name="request">当前 HTTP 请求</param>
            <returns>映射结果</returns>
        </member>
        <member name="T:Ivony.Html.Web.HtmlBindingContext">
            <summary>
            绑定上下文
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.HtmlBindingContext.#ctor(Ivony.Html.Web.IHtmlElementBinder[],Ivony.Html.IHtmlContainer,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            创建 HtmlBindingContext 实例
            </summary>
            <param name="binders">所有可以用于绑定的绑定器</param>
            <param name="scope">要进行数据绑定的范畴</param>
            <param name="dataContext">数据上下文</param>
            <param name="data">数据字典</param>
        </member>
        <member name="M:Ivony.Html.Web.HtmlBindingContext.#ctor(Ivony.Html.Web.HtmlBindingContext,Ivony.Html.IHtmlContainer,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            创建 HtmlBindingContext 实例
            </summary>
            <param name="scope">要进行数据绑定的范畴</param>
            <param name="bindingContext">父级数据绑定上下文</param>
            <param name="dataContext">数据上下文</param>
            <param name="data">数据字典</param>
        </member>
        <member name="M:Ivony.Html.Web.HtmlBindingContext.DataBind">
            <summary>
            进行数据绑定
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.HtmlBindingContext.BindChilds(Ivony.Html.IHtmlContainer)">
            <summary>
            遍历绑定所有子元素
            </summary>
            <param name="container">要绑定子元素的容器</param>
        </member>
        <member name="M:Ivony.Html.Web.HtmlBindingContext.DataBind(Ivony.Html.IHtmlElement)">
            <summary>
            对元素进行数据绑定
            </summary>
            <param name="element">要绑定数据的元素</param>
        </member>
        <member name="M:Ivony.Html.Web.HtmlBindingContext.BindElement(Ivony.Html.IHtmlElement)">
            <summary>
            对元素进行数据绑定
            </summary>
            <param name="element">要绑定数据的元素</param>
        </member>
        <member name="M:Ivony.Html.Web.HtmlBindingContext.GetDataContext(Ivony.Html.IHtmlElement)">
            <summary>
            获取数据上下文
            </summary>
            <param name="element">当前正在处理的元素</param>
            <returns>数据上下文，如果在当前元素被设置的话。</returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlBindingContext.GetDataObject(Ivony.Html.Web.AttributeExpression,Ivony.Html.Web.HtmlBindingContext)">
            <summary>
            解析属性表达式，获取数据对象
            </summary>
            <param name="expression">属性表达式</param>
            <param name="context">当前绑定上下文</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlBindingContext.BindElement(Ivony.Html.Web.IHtmlElementBinder[],Ivony.Html.IHtmlElement)">
            <summary>
            进行元素绑定
            </summary>
            <param name="binders"></param>
            <param name="element"></param>
        </member>
        <member name="M:Ivony.Html.Web.HtmlBindingContext.BindAttribute(Ivony.Html.Web.IHtmlElementBinder[],Ivony.Html.IHtmlAttribute)">
            <summary>
            进行属性绑定
            </summary>
            <param name="attribute">要绑定的属性</param>
        </member>
        <member name="P:Ivony.Html.Web.HtmlBindingContext.ParentContext">
            <summary>
            父级绑定上下文
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.HtmlBindingContext.BindingScope">
            <summary>
            进行绑定的范畴
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.HtmlBindingContext.DataContext">
            <summary>
            当前的数据上下文
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.HtmlBindingContext.Data">
            <summary>
            进行绑定的范畴的数据容器
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.HtmlBindingContext.Binders">
            <summary>
            元素绑定器
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.HtmlElementBinderProvider.GetBinders(System.Object)">
            <summary>
            获取当前可用的所有元素绑定器
            </summary>
            <param name="handler">当前 HTML 页面处理程序</param>
            <returns>所有可用的元素绑定器</returns>
        </member>
        <member name="T:Ivony.Html.Web.HtmlBuildProvider">
            <summary>
            将 HTML 文件编译成 IHtmlDocumentProvider 对象的 BuildProvider
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.HtmlBuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)">
            <summary>
            此方法已被重写以产生代码
            </summary>
            <param name="assemblyBuilder">程序集构建器</param>
        </member>
        <member name="M:Ivony.Html.Web.HtmlBuildProvider.AddReferences(System.Web.Compilation.AssemblyBuilder)">
            <summary>
            添加依赖项
            </summary>
            <param name="assemblyBuilder"></param>
        </member>
        <member name="M:Ivony.Html.Web.HtmlBuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)">
            <summary>
            此方法已被重写以获取编译后的类型
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlBuildProvider.CreateDocumentProviderType">
            <summary>
            创建 IDocumentProvider 实现类
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlBuildProvider.CreateName">
            <summary>
            创建类型名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlBuildProvider.GetParser">
            <summary>
            获取解析器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlBuildProvider.GetDomProviderType">
            <summary>
            获取 HTML Dom 提供程序
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ivony.Html.Web.HtmlBuildProvider.CodeCompilerType">
            <summary>
            此属性已被重写以获取默认编译设置
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.HtmlHandlerBase">
            <summary>
            处理 HTML 文档或文档部分的处理器基类
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.HttpHandlerBase">
            <summary>
            所有处理 HTTP 请求的处理器基类
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.HttpHandlerBase.MapPath(System.String)">
            <summary>
            返回与 Web 服务器上的指定虚拟路径相对应的物理文件路径
            </summary>
            <param name="virtualPath">Web 服务器的虚拟路径</param>
            <returns>与 path 相对应的物理文件路径</returns>
        </member>
        <member name="P:Ivony.Html.Web.HttpHandlerBase.HttpContext">
            <summary>
            获取当前请求的 HTTP 上下文
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.HttpHandlerBase.Request">
            <summary>
            获取请求的页的 HttpRequest 对象
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.HttpHandlerBase.Response">
            <summary>
            获取 HttpResponse 对象。该对象使您得以将 HTTP 响应数据发送到客户端，并包含有关该响应的信息
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.HttpHandlerBase.Server">
            <summary>
            获取 Server 对象，它是 HttpServerUtility 类的实例
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.HttpHandlerBase.Application">
            <summary>
            为当前 Web 请求获取 HttpApplicationState 对象
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.HttpHandlerBase.Trace">
            <summary>
            为当前 Web 请求获取 TraceContext 对象
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.HttpHandlerBase.Cache">
            <summary>
            获取与该页驻留的应用程序关联的 Cache 对象
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.HtmlHandlerBase.Find(System.String)">
            <summary>
            在处理范畴内查找符合选择器的元素
            </summary>
            <param name="expression">CSS 选择器表达式</param>
            <returns>符合选择器的元素</returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlHandlerBase.FindSingle(System.String)">
            <summary>
            在处理范畴内查找符合选择器的唯一元素
            </summary>
            <param name="expression">CSS 选择器表达式</param>
            <returns>符合选择器的唯一元素</returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlHandlerBase.FindFirst(System.String)">
            <summary>
            在处理范畴内查找符合选择器的首个元素
            </summary>
            <param name="expression">CSS 选择器表达式</param>
            <returns>符合选择器的首个元素</returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlHandlerBase.FindLast(System.String)">
            <summary>
            在处理范畴内查找符合选择器的最后一个元素
            </summary>
            <param name="expression">CSS 选择器表达式</param>
            <returns>符合选择器的最后一个元素</returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlHandlerBase.ForFirst(System.String,System.Action{Ivony.Html.IHtmlElement})">
            <summary>
            对处理范畴内查找符合选择器的首个元素进行处理
            </summary>
            <param name="expression">CSS 选择器表达式</param>
            <param name="action">要进行的处理</param>
        </member>
        <member name="M:Ivony.Html.Web.HtmlHandlerBase.ForSingle(System.String,System.Action{Ivony.Html.IHtmlElement})">
            <summary>
            对处理范畴内查找符合选择器的唯一元素进行处理
            </summary>
            <param name="expression">CSS 选择器表达式</param>
            <param name="action">要进行的处理</param>
        </member>
        <member name="M:Ivony.Html.Web.HtmlHandlerBase.ForLast(System.String,System.Action{Ivony.Html.IHtmlElement})">
            <summary>
            对处理范畴内查找符合选择器的最后一个元素进行处理
            </summary>
            <param name="expression">CSS 选择器表达式</param>
            <param name="action">要进行的处理</param>
        </member>
        <member name="M:Ivony.Html.Web.HtmlHandlerBase.ForAll(System.String,System.Action{Ivony.Html.IHtmlElement})">
            <summary>
            对处理范畴内查找符合选择器的所有元素进行处理
            </summary>
            <param name="expression">CSS 选择器表达式</param>
            <param name="action">要进行的处理</param>
        </member>
        <member name="P:Ivony.Html.Web.HtmlHandlerBase.Scope">
            <summary>
            获取要处理的范畴
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.HtmlHandlerBase.VirtualPath">
            <summary>
            获取文档的虚拟路径
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.HtmlListBindingContext">
            <summary>
            进行列表数据绑定的时候的绑定上下文信息
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.HtmlHandlerWrapper">
            <summary>
            此类型用于包装 IHtmlHandler 处理 HTTP 请求
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.JumonyHandler">
            <summary>
            Jumony 用于处理 HTTP 请求的处理器
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.IHtmlHandler">
            <summary>
            定义一个 HTML 文档处理程序
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.IHtmlHandler.ProcessDocument(System.Web.HttpContextBase,Ivony.Html.IHtmlDocument)">
            <summary>
            处理 HTML 文档
            </summary>
            <param name="context">当前请求上下文</param>
            <param name="document">要处理的文档</param>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)">
            <summary>
            实现 IHttpHandler.ProcessRequest
            </summary>
            <param name="context">当前 HTTP 请求的上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.ProcessRequest(System.Web.HttpContextBase)">
            <summary>
            处理 HTTP 请求
            </summary>
            <param name="context">HTTP 上下文信息</param>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.ProcessRequestCore(System.Web.HttpContextBase)">
            <summary>
            派生类重写此方法接管 HTTP 请求处理流程
            </summary>
            <param name="context">HTTP 请求上下文</param>
            <returns>处理后的结果</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.CreateContext(System.Web.HttpContext)">
            <summary>
            创建本次请求的上下文，派生类重写此方法提供自定义上下文。
            </summary>
            <param name="context">HTTP 上下文</param>
            <returns>请求上下文信息</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.ResolveCache">
            <summary>
            尝试获取缓存的输出
            </summary>
            <returns>缓存的输出</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.UpdateCache(Ivony.Web.ICachedResponse)">
            <summary>
            刷新输出缓存
            </summary>
            <param name="cachedResponse">响应的缓存</param>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.CreateResponse(System.String)">
            <summary>
            派生类重写此方法自定义创建响应的逻辑
            </summary>
            <returns>响应</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.OutputResponse(Ivony.Web.ICachedResponse)">
            <summary>
            派生类重写此方法自定义输出响应的逻辑
            </summary>
            <param name="responseData">响应信息</param>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.Ivony#Html#Web#IHtmlHandler#ProcessDocument(System.Web.HttpContextBase,Ivony.Html.IHtmlDocument)">
            <summary>
            实现IHtmlHandler接口
            </summary>
            <param name="context">HTTP 上下文</param>
            <param name="document">要处理的文档</param>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.ProcessDocument">
            <summary>
            派生类重写此方法处理文档
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.AddGeneratorMetaData">
            <summary>
            这个方法是用来添加<![CDATA[<meta name="generator" value="jumony" />]]>元素的。
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.LoadDocument">
            <summary>
            加载Web页面
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.OnPreLoadDocument">
            <summary>引发 PreLoadDocument 事件</summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.OnPostLoadDocument">
            <summary>引发 PostLoadDocument 事件</summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.OnPreProcessDocument">
            <summary>引发 PreProcessDocument 事件</summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.OnPostProcessDocument">
            <summary>引发 PostProcessDocument 事件</summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.OnPreRender">
            <summary>引发 PreRender 事件</summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.OnPostRender">
            <summary>引发 PostRender 事件</summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.OnPreResolveCache">
            <summary>引发 PreResolveCache 事件</summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.OnPostResolveCache">
            <summary>引发 PostResolveCache 事件</summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyHandler.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.JumonyHandler.IsReusable">
            <summary>
            指定此实例是否可以被复用，默认值为false
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.JumonyHandler.RequestMapping">
            <summary>
            获取映射的结果
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.JumonyHandler.CachePolicy">
            <summary>
            获取当前请求的缓存策略
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.JumonyHandler.Document">
            <summary>
            获取正在处理的页面文档
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.JumonyHandler.HttpContext">
            <summary>
            获取与该页关联的 HttpContext 对象。
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.JumonyHandler.Scope">
            <summary>
            获取要处理的 HTML 范畴
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.JumonyHandler.VirtualPath">
            <summary>
            获取当前文档的虚拟路径
            </summary>
        </member>
        <member name="E:Ivony.Html.Web.JumonyHandler.PreLoadDocument">
            <summary>在加载文档前引发此事件</summary>
        </member>
        <member name="E:Ivony.Html.Web.JumonyHandler.PostLoadDocument">
            <summary>在加载文档后引发此事件</summary>
        </member>
        <member name="E:Ivony.Html.Web.JumonyHandler.PreProcessDocument">
            <summary>在处理文档前引发此事件</summary>
        </member>
        <member name="E:Ivony.Html.Web.JumonyHandler.PostProcessDocument">
            <summary>在处理文档后引发此事件</summary>
        </member>
        <member name="E:Ivony.Html.Web.JumonyHandler.PreRender">
            <summary>在渲染文档前引发此事件</summary>
        </member>
        <member name="E:Ivony.Html.Web.JumonyHandler.PostRender">
            <summary>在渲染文档后引发此事件</summary>
        </member>
        <member name="E:Ivony.Html.Web.JumonyHandler.PreResolveCache">
            <summary>在尝试缓存输出前引发此事件</summary>
        </member>
        <member name="E:Ivony.Html.Web.JumonyHandler.PostResolveCache">
            <summary>在缓存未命中后引发此事件</summary>
        </member>
        <member name="T:Ivony.Html.Web.IHandlerWrapper">
            <summary>
            定义处理器包装，实现此接口声明自己是一个处理器的包装，不在该实例上查找各种处理方法。
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.IHandlerWrapper.Handler">
            <summary>
            获取被包装的处理器
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.IHtmlDocumentProvider">
            <summary>
            IHtmlDocument 对象创建适配器
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.IHtmlDocumentProvider.CreateDocument">
            <summary>
            创建 IHtmlDocument 对象
            </summary>
            <returns>创建的文档对象</returns>
        </member>
        <member name="T:Ivony.Html.Web.HtmlProviders">
            <summary>
            提供 Jumony Web 所有提供程序的管理和注册的静态类
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.HtmlProviders.MapRequest(System.Web.HttpRequestBase)">
            <summary>
            映射请求
            </summary>
            <param name="request">当前 HTTP 请求信息</param>
            <returns>请求映射信息</returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlProviders.Parse(Ivony.Html.IHtmlParser,Ivony.Html.Web.HtmlContentResult)">
            <summary>
            分析文档内容
            </summary>
            <param name="parser">分析器</param>
            <param name="content">文档内容加载结果</param>
            <returns>分析结果</returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlProviders.LoadContent(System.String)">
            <summary>
            加载 HTML 文档内容
            </summary>
            <param name="virtualPath">文档的虚拟路径</param>
            <returns>HTML 内容加载结果</returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlProviders.LoadDocument(System.String)">
            <summary>
            加载 HTML 文档
            </summary>
            <param name="virtualPath">文档的虚拟路径</param>
            <returns>HTML 文档对象</returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlProviders.LoadDocument(System.String,System.String@)">
            <summary>
            加载 HTML 文档
            </summary>
            <param name="virtualPath">文档的虚拟路径</param>
            <param name="cacheKey">若文档已被缓存，获取缓存键</param>
            <returns>HTML 文档对象</returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlProviders.TryGetDocumentProvider(System.String)">
            <summary>
            尝试获取指定地址 HTML 文档的文档对象提供程序
            </summary>
            <param name="virtualPath">HTML 文档虚拟路径</param>
            <returns>若添加了 HtmlDocumentProvider 设置，并能将文档编译为 IHtmlDocumentProvider 对象，则返回，否则返回 null</returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlProviders.GetParser(Ivony.Html.Web.HtmlContentResult)">
            <summary>
            获取用于分析 HTML 文档的分析器
            </summary>
            <param name="contentResult">文档内容加载结果</param>
            <returns>HTML 分析器相关信息</returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlProviders.ParseDocument(Ivony.Html.Web.HtmlContentResult)">
            <summary>
            分析 HTML 文档，此方法会根据情况缓存文档模型
            </summary>
            <param name="contentResult">文档加载结果</param>
            <returns>HTML 文档对象</returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlProviders.ParseDocument(Ivony.Html.Web.HtmlContentResult,Ivony.Html.IHtmlParser)">
            <summary>
            分析 HTML 文档，此方法会根据情况缓存文档模型
            </summary>
            <param name="contentResult">文档加载结果</param>
            <param name="parser">HTML 解析器</param>
            <returns>HTML 文档对象</returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlProviders.GetCachePolicy(System.Web.HttpContextBase)">
            <summary>
            获取当前请求的缓存策略
            </summary>
            <param name="context">当前 HTTP 请求</param>
            <returns>适用于当前请求的缓存策略</returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlProviders.CreateCacheDependency(System.String)">
            <summary>
            创建指定虚拟路径文件的缓存依赖项，当文件发生变化时可以清除缓存。
            </summary>
            <param name="virtualPath">需要监视的文件虚拟路径</param>
            <returns>监视路径的缓存依赖项</returns>
        </member>
        <member name="M:Ivony.Html.Web.HtmlProviders.CreateCacheDependency(System.Web.Hosting.VirtualPathProvider,System.String)">
            <summary>
            创建指定虚拟路径文件的缓存依赖项，当文件发生变化时可以清除缓存。
            </summary>
            <param name="provider">当前所使用的虚拟路径提供程序</param>
            <param name="virtualPath">需要监视的文件虚拟路径</param>
            <returns>监视路径的缓存依赖项</returns>
        </member>
        <member name="T:Ivony.Html.Web.ContentProviderCollection">
            <summary>
            ContentProvider 容器
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.ContentProviderCollection.CanLoadContent(System.String)">
            <summary>
            检测是否能加载指定虚拟路径的文档内容
            </summary>
            <param name="virtualPath">虚拟路径</param>
            <returns>是否能加载指定虚拟路径的文档内容</returns>
        </member>
        <member name="M:Ivony.Html.Web.ContentProviderCollection.GetProvider(System.String)">
            <summary>
            获取指定虚拟路径的文档内容加载程序
            </summary>
            <param name="virtualPath">虚拟路径</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.ContentProviderCollection.LoadContent(System.String)">
            <summary>
            加载 HTML 文档内容
            </summary>
            <param name="virtualPath">虚拟路径</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.ContentProviderCollection.RegisterContentProvider(System.String,Ivony.Html.Web.IHtmlContentProvider)">
            <summary>
            注册一个 HTML 内容提供程序
            </summary>
            <param name="extension">所支持的扩展名</param>
            <param name="provider">HTML 内容提供程序</param>
        </member>
        <member name="P:Ivony.Html.Web.ContentProviderCollection.SupportedExtensions">
            <summary>
            所有支持的扩展名
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.IHtmlContentProvider">
            <summary>
            定义 HTML 内容提供程序
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.IHtmlContentProvider.LoadContent(System.String)">
            <summary>
            加载 HTML 内容
            </summary>
            <param name="virtualPath">要加载内容的虚拟路径</param>
            <returns>加载的 HTML 内容</returns>
        </member>
        <member name="T:Ivony.Html.Web.HtmlContentResult">
            <summary>
            IHtmlContentProvider 的内容加载结果
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.HtmlContentResult.#ctor(System.String)">
            <summary>
            创建 HtmlContentResult 实例
            </summary>
            <param name="content">加载的内容</param>
        </member>
        <member name="M:Ivony.Html.Web.HtmlContentResult.#ctor(System.String,System.String)">
            <summary>
            创建 HtmlContentResult 实例
            </summary>
            <param name="content">加载的内容</param>
            <param name="cacheKey">缓存内容所使用的缓存键</param>
        </member>
        <member name="P:Ivony.Html.Web.HtmlContentResult.Content">
            <summary>
            HTML 文本内容
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.HtmlContentResult.CacheKey">
            <summary>
            获取缓存时使用的索引键
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.HtmlContentResult.Provider">
            <summary>
            获取产生此结果的 HtmlContentProvider
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.HtmlContentResult.VirtualPath">
            <summary>
            加载内容的虚拟路径
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.IHtmlParserProvider">
            <summary>
            HTML 解析器提供程序
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.IHtmlParserProvider.GetParser(System.String,System.String)">
            <summary>
            获取一个 HTML 解析器
            </summary>
            
            <param name="virtualPath">HTML 内容虚拟路径</param>
            <param name="htmlContent">HTML 内容</param>
            <returns>HTML 解析器结果</returns>
        </member>
        <member name="M:Ivony.Html.Web.IHtmlParserProvider.ReleaseParser(Ivony.Html.IHtmlParser)">
            <summary>
            释放解析器实例
            </summary>
            <param name="parser"></param>
        </member>
        <member name="T:Ivony.Html.Web.IListDataContext">
            <summary>
            代表一个列表数据上下文
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.JumonyRequestMapperRoute">
            <summary>
            辅助实现 RequestMapping 机制的路由
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.JumonyRequestMapperRoute.GetRouteData(System.Web.HttpContextBase)">
            <summary>
            获取路由信息，将对请求进行 RequestMapping 的结果包装成路由信息
            </summary>
            <param name="httpContext">当前 HTTP 请求上下文</param>
            <returns>路由信息</returns>
        </member>
        <member name="M:Ivony.Html.Web.JumonyRequestMapperRoute.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
            <summary>
            获取虚拟路径，此方法总是返回 null
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <param name="values">路由值</param>
            <returns>虚拟路径数据，总是返回 null</returns>
        </member>
        <member name="T:Ivony.Html.Web.ResourceManager">
            <summary>
            管理网站的样式和脚本资源
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.ResourceManager.#ctor(System.String)">
            <summary>
            创建资源管理器
            </summary>
            <param name="virtualPath">要查找资源的虚拟路径</param>
        </member>
        <member name="M:Ivony.Html.Web.ResourceManager.AddAllReference(Ivony.Html.IHtmlDocument,System.Boolean)">
            <summary>
            添加所有资源引用
            </summary>
            <param name="document"></param>
            <param name="clearReferenceFirst"></param>
        </member>
        <member name="M:Ivony.Html.Web.ResourceManager.ClearAllReference(Ivony.Html.IHtmlDocument,System.Boolean)">
            <summary>
            清除文档中所有的资源文件引用
            </summary>
            <param name="document">要清除资源文件引用的文档</param>
            <param name="headScopeOnly">是否仅清除 &lt;head&gt; 元素内部的引用</param>
        </member>
        <member name="P:Ivony.Html.Web.ResourceManager.AllCssStyleFiles">
            <summary>
            获取所有 CSS 样式资源的路径
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.ResourceManager.AllJavaScriptFiles">
            <summary>
            获取所有 JavaScript 脚本资源的路径
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.DefaultElementBinder">
            <summary>
            默认的元素绑定器，处理 &lt;view&gt; 或者 &lt;binding&gt; 元素，以及属性绑定表达式和绑定属性处理。
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.DefaultElementBinder.BindElement(Ivony.Html.Web.HtmlBindingContext,Ivony.Html.IHtmlElement)">
            <summary>
            对元素进行数据绑定
            </summary>
            <param name="element">需要绑定数据的元素</param>
            <param name="context">绑定上下文</param>
            <returns>是否进行了绑定</returns>
        </member>
        <member name="M:Ivony.Html.Web.DefaultElementBinder.BindElementStyles(Ivony.Html.IHtmlElement,Ivony.Html.IHtmlAttribute[])">
            <summary>
            绑定元素样式
            </summary>
            <param name="element">要处理的元素</param>
            <param name="styleAttributes">样式属性值</param>
        </member>
        <member name="M:Ivony.Html.Web.DefaultElementBinder.BindAttribute(Ivony.Html.Web.HtmlBindingContext,Ivony.Html.IHtmlAttribute)">
            <summary>
            对元素属性进行绑定操作
            </summary>
            <param name="attribute">要绑定的元素属性</param>
            <param name="context">绑定上下文</param>
            <returns>是否成功绑定</returns>
        </member>
        <member name="T:Ivony.Html.Web.StaticFileContentProvider">
            <summary>
            静态文件内容加载器，用于从静态文件中加载 HTML 内容，会自动缓存
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.StaticFileContentProvider.LoadContent(System.String)">
            <summary>
            从静态文件中加载 HTML 内容
            </summary>
            <param name="virtualPath">静态文件的虚拟路径</param>
            <returns>加载的内容结果</returns>
        </member>
        <member name="M:Ivony.Html.Web.StaticFileContentProvider.LoadContent(System.Web.Hosting.VirtualPathProvider,System.String)">
            <summary>
            利用指定 VirtualPathProvider 将虚拟路径所指向文件当作静态文件加载。
            </summary>
            <param name="provider">指定的 VirtualPathProvider</param>
            <param name="virtualPath">虚拟路径</param>
            <returns>加载结果</returns>
        </member>
        <member name="M:Ivony.Html.Web.StaticFileContentProvider.LoadContent(System.Web.Hosting.VirtualFile)">
            <summary>
            从指定虚拟文件中读取文本内容
            </summary>
            <param name="file">虚拟文件</param>
            <returns></returns>
        </member>
        <member name="T:Ivony.Html.Web.WebFormPageContentProvider">
            <summary>
            ASPX 文件内容加载器，用于从 ASPX 动态页面中加载内容
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.WebFormPageContentProvider.LoadContent(System.String)">
            <summary>
            读取 ASPX 页面所呈现的 HTML 内容
            </summary>
            <param name="virtualPath">ASPX 文件路径</param>
            <returns>ASPX 页面所呈现的 HTML 内容</returns>
        </member>
        <member name="T:Ivony.Html.Web.WebParser">
            <summary>
            专门用于 Web UI 引擎的 HTML 解析器
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.WebParser.IsCDataElement(Ivony.Html.Parser.ContentModels.HtmlBeginTag)">
            <summary>
            重写此方法以确保 &lt;partial&gt; 标签被视为CData元素。
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="T:Ivony.Html.Web.RequestMapping">
            <summary>
            IRequestMapper 产生的映射结果
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.RequestMapping.#ctor(Ivony.Html.Web.IRequestMapper,System.String,Ivony.Html.Web.IHtmlHandler)">
            <summary>
            创建 RequestMapping 对象
            </summary>
            <param name="mapper">产生此结果的映射器</param>
            <param name="virtualPath">HTML 模版路径</param>
            <param name="handler">HTML 文档处理程序</param>
        </member>
        <member name="M:Ivony.Html.Web.RequestMapping.LoadDocument">
            <summary>
            加载 HTML 文档模版
            </summary>
            <returns>HTML 文档模版</returns>
        </member>
        <member name="M:Ivony.Html.Web.RequestMapping.LoadDocument(System.String@)">
            <summary>
            加载文档
            </summary>
            <param name="cacheKey">文档缓存键</param>
            <returns>HTML 文档</returns>
        </member>
        <member name="P:Ivony.Html.Web.RequestMapping.Mapper">
            <summary>
            获取请求的映射器
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.RequestMapping.VirtualPath">
            <summary>
            获取 HTML 文档模版路径
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.RequestMapping.CacheKey">
            <summary>
            获取模版缓存键
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.RequestMapping.Handler">
            <summary>
            HTML 文档处理程序
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.HtmlRewriteModule">
            <summary>
            重写 HTTP 请求映射到 Jumony 处理程序的模块
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.WebExtenions">
            <summary>
            提供一些 Web 相关的扩展方法。
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.WebExtenions.GetMapping(System.Web.HttpContextBase)">
            <summary>
            获取请求的映射信息
            </summary>
            <param name="context">请求上下文</param>
            <returns>映射信息</returns>
        </member>
    </members>
</doc>
